                                           
1、下面对FLASK说法正确的是(      )
A、Flask是一个轻量级的Web应用框架, 使用Python编写。基于 WerkzeugWSGI工具箱和 Jinja2模板引擎，使用 BSD 授权。
B、Flask 是一个微框架（Micro framework）
C、“微”(micro) 并不意味着你要把整个web应用放到一个python文件里（虽然确实可以），也不意味着Flask 在功能上有所欠缺。微框架中的“微”意味着 Flask 旨在保持核心功能的简单而易于扩展。
D、Flask尽量避免重复制造轮子，而是与已有的优秀轮子去结合，这使得Flask灵活、强大，且定制性更强。







2、FLASK的web服务器使用什么协议?






Web服务器网关接口(Web Server Gateway Interface,WSGI）的协议
详情请参考：





3、在Flask程序中定义路由的最简单方式，是使用程序实例提供的@app.route修饰器
其中app可以变吗？





from flask import Flask  app=Flask(__name__)





4、__name__=='__main__'的作用是什么？








这里确保直接执行这个脚本时才会启动开发Web服务器，如果这个脚本由其他脚本引入，程序假定父级脚本会启动不同的服务器，因此不会执行。







5、设置debug=True的有几种方法：






  1、直接在应用对象上设置:app.debug = True  app.run()
  2、作为run的参数传入:app.run(debug=True)
  3、配置文件中设置  创建一个config.py文件  import config   app.config.from_object(config)





6、url_for()的作用？ 







函数最简单的用法是以视图函数名作为参数， 返回对应的 URL




7、一个a超链接，后面带参数和值，用request的（）属性接收这个数据?
 A、 args  B、values  C、POST  D、form






flask获取参数方式：
request.form.get("key", type=str, default=None) 获取表单数据
request.args.get("key") 获取get请求参数
request.values.get("key") 获取所有参数




8、request对象中scheme的属性值有() 
 A、response B、https C、http  D、DNS






9、如何解决HTTP中无状态的问题？ 






1、cookie  2、session




10、Flask提供了两种上下文？ 






一种是应用上下文(Application Context)，一种是请求上下文(Request Context)




11、怎么实现模板的继承？








{% extends 'base.html'%}







12、from faker import Factory 
fake = Factory().create('zh_CN') 
其中参数‘zh_CN’有什么作用？










13、对Flask 蓝图(Blueprint)的理解？







英文是blueprint。它的主要功能是使模块式开发成为可能。
Blueprint通过把实现不同功能的module分开,从而把一个大的application分割成各自实现不同功能的module。在一个Blueprint中可以调用另一个blueprint的view function, 但要加相应的blueprint名。?Blueprint还有其他好处，其本质上来说就是让程序更加松耦合，更加灵活，增加复用性，提高查错效率，降低出错概率。?
blueprint是flask里面的一个概念，它定义了用于某一单一模块的视图（view），模板（templates），静态文件（static），表单（forms）等等资源.


14、蓝图的优、缺点




缺点：不能在应用创建后撤销注册一个蓝图而不销毁整个应用对象。
优点：蓝图的优势在于工程的模块化，也就是常说的松耦合，将不同的模块分开组织，将一个复杂的工程分解成若干功能单一，扩展性强的蓝图。




15、使用蓝图的三个步骤




1、创建 一个蓝图对象
blue = Blueprint("blue"， name )
2、在这个蓝图对象上进行操作 ，例如注册路由、指定静态文件夹、注册模板过滤器@blue.route('/')
def blue_index():
   return 'Welcome to my blueprint
3、在应用对象上注册这个蓝图对象
app.register_blueprint(blue，url_prefix='/blue')





16、什么是ORM? 






OBJECT RELATIONAL MAPPING
概念： 对象关系映射（Object Relational Mapping，简称ORM，或O/RM，或O/R mapping），是一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换。
详细介绍： 让我们从O/R开始。字母O起源于”对象”(Object),而R则来自于”关系”(Relational)。几乎所有的程序里面，都存在对象和关系数据库。在业务逻辑层和用户界面层中，我们是面向对象的。当对象信息发生变化的时候，我们需要把对象的信息保存在关系数据库中。?
当你开发一个应用程序的时候(不使用O/R Mapping),你可能会写不少数据访问层的代码，用来从数据库保存，删除，读取对象信息，等等。你在DAL中写了很多的方法来读取对象数据，改变状态对象等等任务。而这些代码写起来总是重复的。?
ORM解决的主要问题是对象关系的映射。域模型和关系模型分别是建立在概念模型的基础上的。域模型是面向对象的，而关系模型是面向关系的。一般情况下，一个持久化类和一个表对应，类的每个实例对应表中的一条记录，类的每个属性对应表的每个字段。?
ORM技术特点：?
1.提高了开发效率。由于ORM可以自动对Entity对象与数据库中的Table进行字段与属性的映射，所以我们实际可能已经不需要一个专用的、庞大的数据访问层。?
2.ORM提供了对数据库的映射，不用sql直接编码，能够像操作对象一样从数据库获取数据。




17、如何在Flask中访问会话?




会话（seesion）数据存储在服务器上。 会话的生命周期是客户端登录到服务器并注销的时间间隔。 需要在此会话中进行的数据存储在服务器上的临时目录中。
from flask import session导入会话对象
session['name'] = 'admin'给会话添加变量
session.pop('username', None)删除会话变量




18、解释Python Flask中的数据库连接?







python中的数据库连接有两种方式
在脚本中以用第三方库正常连接，用sql语句正常操作数据库，如mysql关系型数据库的pymsql库
用ORM来进行数据库连接，flask中典型的flask_sqlalchemy，已面向对象的方式进行数据库的连接与操作

19、手写FLASK Hello的代码




   from flask import Flask
app = Flask(__name__)
@app.route("/")
def example():
    return "hello"
if __name__ == '__main__':
    app.run(debug=True, host='127.0.0.1', port=5000)




20、27、Flask框架依赖组件?





?Route(路由)
?templates(模板)
?Models(form模型)
?blueprint(蓝图)
Jinja2模板引擎